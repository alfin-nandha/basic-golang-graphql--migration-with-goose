// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Author struct {
	Name string  `json:"name"`
	Mail *string `json:"mail"`
}

type AuthorInput struct {
	Name string  `json:"name"`
	Mail *string `json:"mail"`
}

type Book struct {
	Title   string     `json:"title"`
	BookID  *string    `json:"book_id"`
	Genre   *BookGenre `json:"genre"`
	Authors []*Author  `json:"authors"`
}

type BookInput struct {
	Title   string         `json:"title"`
	Genre   *BookGenre     `json:"genre"`
	Authors []*AuthorInput `json:"authors"`
}

type DeleteStatus struct {
	Iserror     bool    `json:"iserror"`
	Description *string `json:"description"`
}

type GetBookResult struct {
	Isexists bool  `json:"isexists"`
	Book     *Book `json:"book"`
}

type PostStatus struct {
	Iserror     bool    `json:"iserror"`
	Description *string `json:"description"`
	BookID      *string `json:"book_id"`
}

type PutStatus struct {
	Iserror     bool    `json:"iserror"`
	Description *string `json:"description"`
}

type UpdateAuthorInput struct {
	Name *string `json:"name"`
	Mail *string `json:"mail"`
}

type UpdateInput struct {
	BookID  string               `json:"book_id"`
	Title   *string              `json:"title"`
	Genre   *BookGenre           `json:"genre"`
	Authors []*UpdateAuthorInput `json:"authors"`
}

type BookGenre string

const (
	BookGenreFiction    BookGenre = "FICTION"
	BookGenreNonfiction BookGenre = "NONFICTION"
)

var AllBookGenre = []BookGenre{
	BookGenreFiction,
	BookGenreNonfiction,
}

func (e BookGenre) IsValid() bool {
	switch e {
	case BookGenreFiction, BookGenreNonfiction:
		return true
	}
	return false
}

func (e BookGenre) String() string {
	return string(e)
}

func (e *BookGenre) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookGenre(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookGenre", str)
	}
	return nil
}

func (e BookGenre) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
