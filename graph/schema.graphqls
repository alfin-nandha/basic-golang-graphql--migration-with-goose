type Query {
    book(book_id : ID!): GetBook
    books: [Book]
    genre(genre_id : ID!): GetGenre
    genres: [Genre]
    author(author_id : ID!): GetAuthor
    authors: [Author]
}
type Mutation {
    add_author(input: AuthorInput!): PostStatus
    update_author(input: UpdateAuthorInput): PutStatus
    delete_author(author_id: ID!): DeleteStatus
    add_genre(input: GenreInput!): PostStatus
    update_genre(input: UpdateGenreInput): PutStatus
    delete_genre(genre_id: ID!): DeleteStatus
    add_book(input: BookInput!): PostStatus
    update_book(input: UpdateBookInput): PutStatus
    delete_book(book_id: ID!): DeleteStatus
}

# AUTHOR SCHEMAS
type Author{
    author_id: ID
    name: String!
    mail: String
}
type GetAuthor{
    isexists: Boolean!
    author: Author
}
input AuthorInput{
    name: String!
    mail: String
}
input UpdateAuthorInput{
    name: String
    mail: String
}

# BOOK SCHEMAS
type Book{
    name: String!
    book_id: ID
    genre: String
    authors: String!
}
type GetBook{
    isexists: Boolean!
    book: Book
}
input BookInput{
    name: String!
    genre: String
    authors: String
}
input UpdateBookInput{
    book_id: ID!
    name: String
    genre: String
    authors: String
}

# GENRE SCHEMAS
type Genre{
    genre_id: ID
    name: String
}
type GetGenre{
    isexists: Boolean!
    genre: Genre
}
input GenreInput{
    name: String!
}
input UpdateGenreInput{
    genre_id: ID!
    name: String
}

# RESPONSE SCHEMAS
type PostStatus{
    iserror: Boolean!
    description: String
    id: ID
}
type PutStatus{
    iserror: Boolean!
    description: String
}
type DeleteStatus{
    iserror: Boolean!
    description: String
}
